#!/bin/bash
# @author madebycm (2025-01-31)
# Sandbox launcher - mounts current directory as /project

# Get current directory
CURRENT_DIR="$(pwd)"

# Get sandbox directory from script location
SANDBOX_DIR="$(dirname "$(readlink -f "$0")")"

# Generate container name based on current directory path
# Replace / with - and remove leading/trailing -
CONTAINER_SUFFIX=$(echo "$CURRENT_DIR" | sed 's|/|-|g' | sed 's/^-//' | sed 's/-$//' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
CONTAINER_NAME="sbox-${CONTAINER_SUFFIX}"

# Docker image name
IMAGE_NAME="sbox-image"

# Change to sandbox directory
cd "$SANDBOX_DIR"

# Handle install command
if [ "$1" = "install" ]; then
    INSTALL_DIR="$HOME/.local/bin"
    mkdir -p "$INSTALL_DIR"
    
    # Copy sbox script
    cp "$SANDBOX_DIR/sbox" "$INSTALL_DIR/sbox"
    chmod +x "$INSTALL_DIR/sbox"
    
    # Check if ~/.local/bin is in PATH
    if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
        echo "sbox installed to $INSTALL_DIR/sbox"
        echo ""
        echo "To use sbox from anywhere, add this to your shell profile:"
        echo "  export PATH=\"\$HOME/.local/bin:\$PATH\""
    else
        echo "sbox installed successfully to $INSTALL_DIR/sbox"
        echo "You can now use 'sbox' from anywhere!"
    fi
    exit 0
fi

# Handle uninstall command
if [ "$1" = "uninstall" ]; then
    INSTALL_DIR="$HOME/.local/bin"
    if [ -f "$INSTALL_DIR/sbox" ]; then
        rm "$INSTALL_DIR/sbox"
        echo "sbox uninstalled from $INSTALL_DIR/sbox"
    else
        echo "sbox not found in $INSTALL_DIR"
    fi
    exit 0
fi

# Handle purge command
if [ "$1" = "purge" ]; then
    echo "WARNING: This will delete ALL sbox containers and volumes!"
    echo "All data stored in shared volumes will be PERMANENTLY DELETED."
    echo ""
    echo -n "Are you sure? (yes/NO): "
    read -r confirmation
    
    if [ "$confirmation" = "yes" ]; then
        echo ""
        echo "Stopping all sbox containers..."
        docker ps -a --filter "name=^sbox-" --format "{{.Names}}" | xargs -r docker stop
        
        echo "Removing all sbox containers..."
        docker ps -a --filter "name=^sbox-" --format "{{.Names}}" | xargs -r docker rm
        
        echo "Removing all sbox volumes..."
        docker volume ls --filter "name=^sbox" --format "{{.Name}}" | xargs -r docker volume rm
        
        echo "Removing sbox image..."
        docker rmi "$IMAGE_NAME" 2>/dev/null
        
        echo ""
        echo "Purge complete! All sbox containers, volumes, and images have been removed."
    else
        echo "Purge cancelled."
    fi
    exit 0
fi

# Handle list command
if [ "$1" = "list" ]; then
    echo "Running sbox containers:"
    echo ""
    # Find all containers starting with sbox-
    docker ps --filter "name=^sbox-" --format "table {{.Names}}\t{{.Status}}\t{{.Mounts}}" | while IFS= read -r line; do
        if [[ "$line" == "NAMES"* ]]; then
            # Header row
            echo "CONTAINER NAME    STATUS    PROJECT PATH"
            echo "----------------------------------------"
        else
            # Parse container info
            container_name=$(echo "$line" | awk '{print $1}')
            status=$(echo "$line" | awk '{print $2" "$3" "$4}')
            
            # Get the project mount path
            mount_path=$(docker inspect "$container_name" --format '{{ range .Mounts }}{{ if eq .Destination "/project" }}{{ .Source }}{{ end }}{{ end }}' 2>/dev/null)
            
            if [ -n "$mount_path" ]; then
                printf "%-20s %-15s %s\n" "$container_name" "$status" "$mount_path"
            fi
        fi
    done
    exit 0
fi

# Handle stop command
if [ "$1" = "stop" ]; then
    if [ -z "$2" ]; then
        # No container specified, stop the one for current directory
        echo "Stopping sandbox container: $CONTAINER_NAME..."
        docker stop "$CONTAINER_NAME" 2>/dev/null && docker rm "$CONTAINER_NAME" 2>/dev/null
    else
        # Stop specific container
        echo "Stopping sandbox container: $2..."
        docker stop "$2" 2>/dev/null && docker rm "$2" 2>/dev/null
    fi
    exit 0
fi

# Build image if it doesn't exist
if ! docker image inspect "$IMAGE_NAME" >/dev/null 2>&1; then
    echo "Building sbox image..."
    docker build -t "$IMAGE_NAME" .
fi

# Check if container for this directory is running
if [ "$(docker ps -q -f name="^${CONTAINER_NAME}$")" ]; then
    echo "Sandbox container for this directory is already running: $CONTAINER_NAME"
    echo "Mounted: $CURRENT_DIR â†’ /project"
    echo ""
    echo "Entering existing container..."
    docker exec -it "$CONTAINER_NAME" /bin/bash
else
    # Check if another sbox instance exists for this path
    existing_container=$(docker ps --filter "name=^sbox-" --format "{{.Names}}" | while read -r name; do
        mount_path=$(docker inspect "$name" --format '{{ range .Mounts }}{{ if eq .Destination "/project" }}{{ .Source }}{{ end }}{{ end }}' 2>/dev/null)
        if [ "$mount_path" = "$CURRENT_DIR" ]; then
            echo "$name"
            break
        fi
    done)
    
    if [ -n "$existing_container" ]; then
        echo "Found existing container for this path: $existing_container"
        echo "Entering existing container..."
        docker exec -it "$existing_container" /bin/bash
    else
        # Container not running for this directory
        echo "Creating new sandbox instance: $CONTAINER_NAME"
        echo "Mounting $CURRENT_DIR as /project..."
        
        # Check if container exists but is stopped
        if [ "$(docker ps -aq -f name="^${CONTAINER_NAME}$")" ]; then
            # Container exists but stopped, remove it first
            docker rm "$CONTAINER_NAME" 2>/dev/null
        fi
        
        # Create and start new container with shared volumes
        docker run -dit \
            --name "$CONTAINER_NAME" \
            -v "$CURRENT_DIR:/project" \
            -v "sbox-data:/data" \
            -v "sbox-usr:/usr" \
            -v "sbox-var:/var" \
            -v "sbox-etc:/etc" \
            -v "sbox-opt:/opt" \
            -v "sbox-home:/home" \
            -v "sbox-root:/root" \
            "$IMAGE_NAME" \
            /bin/bash
        
        # Enter the container
        docker exec -it "$CONTAINER_NAME" /bin/bash
    fi
fi