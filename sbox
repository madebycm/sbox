#!/bin/bash
# @author madebycm (2025-01-31)
# Sandbox launcher - mounts current directory as /project

# Get current directory
CURRENT_DIR="$(pwd)"

# Handle install command first (before config check)
if [ "$1" = "install" ]; then
    # When installing, we're in the source directory
    SANDBOX_DIR="$(dirname "$(readlink -f "$0")")"
    INSTALL_DIR="$HOME/.local/bin"
    mkdir -p "$INSTALL_DIR"
    
    # Create config directory and file
    CONFIG_DIR="$HOME/.sbox"
    CONFIG_FILE="$CONFIG_DIR/config"
    mkdir -p "$CONFIG_DIR"
    
    # Store the installation root directory in config
    cat > "$CONFIG_FILE" << EOF
# @author madebycm (2025-01-31)
# sbox configuration
ROOT_INSTALL_DIR="$(pwd)"
EOF
    
    # Create a wrapper script with embedded sbox path
    cat > "$INSTALL_DIR/sbox" << EOF
#!/bin/bash
# @author madebycm (2025-01-31)
# sbox wrapper - installed version

# The actual sbox script location
SBOX_EXEC="$SANDBOX_DIR/sbox"

# Check if sbox executable exists
if [ ! -x "\$SBOX_EXEC" ]; then
    echo "Error: sbox executable not found at \$SBOX_EXEC"
    echo "The sbox installation may have been moved or deleted."
    exit 1
fi

# Execute the real sbox script
exec "\$SBOX_EXEC" "\$@"
EOF
    
    chmod +x "$INSTALL_DIR/sbox"
    
    # Check if ~/.local/bin is in PATH
    if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
        echo "sbox installed to $INSTALL_DIR/sbox"
        echo ""
        echo "To use sbox from anywhere, add this to your shell profile:"
        echo "  export PATH=\"\$HOME/.local/bin:\$PATH\""
    else
        echo "sbox installed successfully to $INSTALL_DIR/sbox"
        echo "You can now use 'sbox' from anywhere!"
    fi
    exit 0
fi

# Get sandbox directory from script location
if [ -f "$0" ] && [ "$(basename "$(dirname "$0")")" = "sbox" ]; then
    # Running from source directory
    SANDBOX_DIR="$(dirname "$(readlink -f "$0")")"
    # When running from source, use sandbox dir as root install dir
    ROOT_INSTALL_DIR="$SANDBOX_DIR"
else
    # Should not happen - wrapper script calls the real sbox
    echo "Error: Unexpected execution context"
    exit 1
fi

# Load ROOT_INSTALL_DIR from config if it exists
CONFIG_FILE="$HOME/.sbox/config"
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# Generate container name based on current directory path
# Replace / with - and remove leading/trailing -
CONTAINER_SUFFIX=$(echo "$CURRENT_DIR" | sed 's|/|-|g' | sed 's/^-//' | sed 's/-$//' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
CONTAINER_NAME="sbox-${CONTAINER_SUFFIX}"

# Docker image name
IMAGE_NAME="sbox-image"

# Change to sandbox directory
cd "$SANDBOX_DIR"

# Handle uninstall command
if [ "$1" = "uninstall" ]; then
    INSTALL_DIR="$HOME/.local/bin"
    CONFIG_DIR="$HOME/.sbox"
    
    # Remove the wrapper script
    if [ -f "$INSTALL_DIR/sbox" ]; then
        rm "$INSTALL_DIR/sbox"
        echo "sbox uninstalled from $INSTALL_DIR/sbox"
    else
        echo "sbox not found in $INSTALL_DIR"
    fi
    
    # Remove the config directory
    if [ -d "$CONFIG_DIR" ]; then
        rm -rf "$CONFIG_DIR"
        echo "Removed sbox configuration from $CONFIG_DIR"
    fi
    
    exit 0
fi

# Handle purge command
if [ "$1" = "purge" ]; then
    echo "WARNING: This will delete ALL sbox containers and volumes!"
    echo "All data stored in shared volumes will be PERMANENTLY DELETED."
    echo ""
    echo -n "Are you sure? (yes/NO): "
    read -r confirmation
    
    if [ "$confirmation" = "yes" ]; then
        echo ""
        echo "Stopping all sbox containers..."
        docker ps -a --filter "name=^sbox-" --format "{{.Names}}" | xargs -r docker stop
        
        echo "Removing all sbox containers..."
        docker ps -a --filter "name=^sbox-" --format "{{.Names}}" | xargs -r docker rm
        
        echo "Removing all sbox volumes..."
        docker volume ls --filter "name=^sbox" --format "{{.Name}}" | xargs -r docker volume rm
        
        echo "Removing sbox image..."
        docker rmi "$IMAGE_NAME" 2>/dev/null
        
        echo ""
        echo "Purge complete! All sbox containers, volumes, and images have been removed."
    else
        echo "Purge cancelled."
    fi
    exit 0
fi

# Handle list command
if [ "$1" = "list" ]; then
    echo "Running sbox containers:"
    echo ""
    # Find all containers starting with sbox-
    docker ps --filter "name=^sbox-" --format "table {{.Names}}\t{{.Status}}\t{{.Mounts}}" | while IFS= read -r line; do
        if [[ "$line" == "NAMES"* ]]; then
            # Header row
            echo "CONTAINER NAME    STATUS    PROJECT PATH"
            echo "----------------------------------------"
        else
            # Parse container info
            container_name=$(echo "$line" | awk '{print $1}')
            status=$(echo "$line" | awk '{print $2" "$3" "$4}')
            
            # Get the project mount path
            mount_path=$(docker inspect "$container_name" --format '{{ range .Mounts }}{{ if eq .Destination "/project" }}{{ .Source }}{{ end }}{{ end }}' 2>/dev/null)
            
            if [ -n "$mount_path" ]; then
                printf "%-20s %-15s %s\n" "$container_name" "$status" "$mount_path"
            fi
        fi
    done
    exit 0
fi

# Handle stop command
if [ "$1" = "stop" ]; then
    if [ -z "$2" ]; then
        # No container specified, stop all sbox containers
        echo "Stopping all sandbox containers..."
        containers=$(docker ps -a --filter "name=^sbox-" --format "{{.Names}}")
        if [ -z "$containers" ]; then
            echo "No sbox containers found."
        else
            echo "$containers" | while read -r container; do
                echo "Stopping $container..."
                docker stop "$container" 2>/dev/null && docker rm "$container" 2>/dev/null
            done
            echo "All sandbox containers stopped."
        fi
    else
        # Stop specific container
        echo "Stopping sandbox container: $2..."
        docker stop "$2" 2>/dev/null && docker rm "$2" 2>/dev/null
    fi
    exit 0
fi

# Build image if it doesn't exist
if ! docker image inspect "$IMAGE_NAME" >/dev/null 2>&1; then
    echo "Building sbox image..."
    docker build -t "$IMAGE_NAME" .
fi

# Check if container for this directory is running
if [ "$(docker ps -q -f name="^${CONTAINER_NAME}$")" ]; then
    echo "Sandbox container for this directory is already running: $CONTAINER_NAME"
    echo "Mounted: $CURRENT_DIR â†’ /project"
    echo ""
    echo "Entering existing container..."
    docker exec -it "$CONTAINER_NAME" /bin/bash
else
    # Check if another sbox instance exists for this path
    existing_container=$(docker ps --filter "name=^sbox-" --format "{{.Names}}" | while read -r name; do
        mount_path=$(docker inspect "$name" --format '{{ range .Mounts }}{{ if eq .Destination "/project" }}{{ .Source }}{{ end }}{{ end }}' 2>/dev/null)
        if [ "$mount_path" = "$CURRENT_DIR" ]; then
            echo "$name"
            break
        fi
    done)
    
    if [ -n "$existing_container" ]; then
        echo "Found existing container for this path: $existing_container"
        echo "Entering existing container..."
        docker exec -it "$existing_container" /bin/bash
    else
        # Container not running for this directory
        echo "Creating new sandbox instance: $CONTAINER_NAME"
        echo "Mounting $CURRENT_DIR as /project..."
        
        # Check if container exists but is stopped
        if [ "$(docker ps -aq -f name="^${CONTAINER_NAME}$")" ]; then
            # Container exists but stopped, remove it first
            docker rm "$CONTAINER_NAME" 2>/dev/null
        fi
        
        # Read additional volume mappings from mappings.conf
        EXTRA_VOLUMES=""
        MAPPINGS_FILE="$SANDBOX_DIR/mappings.conf"
        if [ -f "$MAPPINGS_FILE" ]; then
            while IFS= read -r line; do
                # Skip empty lines and comments
                if [[ -n "$line" && ! "$line" =~ ^[[:space:]]*# ]]; then
                    # Split on first colon to handle paths with colons
                    HOST_PATH="${line%%:*}"
                    CONTAINER_PATH="${line#*:}"
                    
                    # Expand tilde and $HOME in both paths
                    HOST_PATH="${HOST_PATH/#\~/$HOME}"
                    HOST_PATH="${HOST_PATH//\$HOME/$HOME}"
                    
                    # Container paths must be absolute - expand tilde to /home/user
                    CONTAINER_PATH="${CONTAINER_PATH/#\~/\/home/user}"
                    CONTAINER_PATH="${CONTAINER_PATH//\$HOME/\/home/user}"
                    
                    # Add volume mapping
                    EXTRA_VOLUMES="$EXTRA_VOLUMES -v \"$HOST_PATH:$CONTAINER_PATH\""
                fi
            done < "$MAPPINGS_FILE"
        fi
        
        # Create and start new container with shared volumes
        eval docker run -dit \
            --name "$CONTAINER_NAME" \
            -v "$CURRENT_DIR:/project" \
            -v "sbox-data:/data" \
            -v "sbox-usr:/usr" \
            -v "sbox-var:/var" \
            -v "sbox-etc:/etc" \
            -v "sbox-opt:/opt" \
            -v "$ROOT_INSTALL_DIR/home:/home/sBOX" \
            -v "sbox-root:/root" \
            $EXTRA_VOLUMES \
            "$IMAGE_NAME" \
            /bin/bash
        
        # Enter the container
        docker exec -it "$CONTAINER_NAME" /bin/bash
    fi
fi